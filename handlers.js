import { generateContent } from './generateContent.js';

export const studentHandler = async (ctx) => {
  const studentInfo = `**–°—Ç—É–¥–µ–Ω—Ç:** –ú–∞–ª–∏–π –û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥—ñ–π–æ–≤–∏—á\n**–ì—Ä—É–ø–∞:** –Ü–ü-24`;
  await ctx.reply(studentInfo, {
    parse_mode: 'Markdown',
  });
};

export const technologyHandler = async (ctx) => {
  const itInfo = `üåê **–û–≥–ª—è–¥ IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π (Web-—Ä–æ–∑—Ä–æ–±–∫–∞):**
    
**Frontend (–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∞):**
1. **HTML** ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
2. **CSS** ‚Äî –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–≥–ª—è–¥ —Ç–∞ —Å—Ç–∏–ª—ñ.
3. **JavaScript** ‚Äî —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –ª–æ–≥—ñ–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∞.
4. *–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:* React.

**Backend (–°–µ—Ä–≤–µ—Ä–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞):**
1. **–ú–æ–≤–∏:** JavaScript (Node.js, Express, Nest).
2. **–ë–∞–∑–∏ –¥–∞–Ω–∏—Ö:** MySQL, PostgreSQL, MongoDB.
3. **API** ‚Äî –∑–≤'—è–∑–æ–∫ –º—ñ–∂ Frontend —Ç–∞ Backend.`;

  await ctx.reply(itInfo, {
    parse_mode: 'Markdown',
  });
};

export const contactsHandler = async (ctx) => {
  const safeUsername = '@freakman\\_s';

  const contactsInfo = `üìû **–ö–æ–Ω—Ç–∞–∫—Ç–∏:**
*Number:* +380686956510
*Telegram:* ${safeUsername}
*GitHub:* [–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ GitHub](https://github.com/JessFreak) 
*Email:* sashamaluq333@gmail.com`;

  await ctx.reply(contactsInfo, {
    parse_mode: 'Markdown',
  });
};

export const promptHandler = async (ctx) => {
  const promptInfo = `üí° **–Ø –≥–æ—Ç–æ–≤–∏–π!** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–º–ø—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à –ø—Ä–æ –∫–æ—Ç–∞").`;
  await ctx.reply(promptInfo, {
    parse_mode: 'Markdown',
  });
};

export const geminiHandler = async (ctx) => {
  const userPrompt = ctx.message.text;
  const chatId = ctx.message.chat.id;

  let loadingMessage;
  try {
    loadingMessage = await ctx.reply('‚åõÔ∏è –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ Gemini...', { parse_mode: 'Markdown' });

    const responseText = await generateContent(userPrompt);

    await ctx.telegram.editMessageText(
      chatId,
      loadingMessage.message_id,
      null,
      responseText,
      { parse_mode: 'Markdown' },
    );

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É Gemini:', error);
    const errorMessage = ` –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à GEMINI_API_KEY.`;

    if (loadingMessage) {
      await ctx.telegram.editMessageText(
        chatId,
        loadingMessage.message_id,
        null,
        errorMessage,
      );
    } else {
      await ctx.reply(errorMessage);
    }
  }
};